{"mappings":"AAAA,IAAI,QAAQ,SAAS,eAAe;AACpC,IAAI,eAAe,SAAS,eAAe;AAC3C,IAAI,kBAAkB,aAAa,WAAW;AAE9C,4CAA4C;AAC5C,IAAI,aAAa,SAAS,cAAc;AACxC,IAAI,gBAAgB,WAAW,WAAW;AAE1C,IAAI,+BAA+B;AAEnC,IAAI,yBAAyB;IAC3B,uBAAuB;IACvB,oBAAoB;AACtB;AAEA,IAAI;AACJ,QAAQ,OAAO,KAAK,SAAU,WAAW;IACvC,QAAQ;AACV;AAEA,SAAS;IACP,IAAI,UAAU,aAAa,cACzB,UAAU,aACP,aAAa;QAAE,OAAO;IAAK,GAC3B,KAAK,CAAC;QACL,MAAM,YAAY;IACpB,GACC,MAAM,CAAC;QACN,QAAQ,IAAI;IACd;IAGJ,MAAM,mBAAmB;QACvB,aAAa,QAAQ,MAAM;QAC3B,aAAa,SAAS,MAAM;QAC5B,WAAW,QAAQ,MAAM;QACzB,WAAW,SAAS,MAAM;IAC5B;IAEA,MAAM,iBAAiB,cAAc;AACvC;AAEA,SAAS;IACP,cAAc,UAAU,OAAO,GAAG;IAClC,IAAI,8BAA8B;QAChC,+BAA+B;QAC/B,mDAAmD;QACnD,MACG,cAAc,YAAY,wBAC1B,KAAK,CAAC;YACL,oBAAoB;YACpB,+BAA+B;QACjC;IACJ;IACA,mFAAmF;IACnF,OAAO,sBAAsB;AAC/B;AAEA,SAAS,oBAAoB,YAAY;IACvC,IAAI,UAAU,cAAc,aAC1B,GACA,GACA,aAAa,OACb,aAAa;IAEf,sCAAsC;IACtC,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,KAAK,QAAQ,KAAK,EAAG;QAC/C,IAAI,aAAa,IAAI;QACrB,4GAA4G;QAC5G,0DAA0D;QAC1D,IAAI,aAAa,IAAI,CAAC,WAAW,IAAI,GACnC,QAAQ,IAAI,CAAC,IAAI,EAAE,GAAG;IAE1B;IACA,sCAAsC;IACtC,gBAAgB,aAAa,SAAS,GAAG;AAC3C;AAEA","sources":["src/index.js"],"sourcesContent":["let video = document.getElementById(\"webcam\");\nlet webcamCanvas = document.getElementById(\"canvas\");\nlet webcamCanvasCtx = webcamCanvas.getContext(\"2d\");\n\n//In Memory Canvas used for model prediction\nvar tempCanvas = document.createElement(\"canvas\");\nvar tempCanvasCtx = tempCanvas.getContext(\"2d\");\n\nlet previousSegmentationComplete = true;\n\nlet segmentationProperties = {\n  segmentationThreshold: 0.7,\n  internalResolution: \"full\",\n};\n\nvar model;\nbodyPix.load().then(function (loadedModel) {\n  model = loadedModel;\n});\n\nfunction main() {\n  if (navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices\n      .getUserMedia({ video: true })\n      .then((stream) => {\n        video.srcObject = stream;\n      })\n      .catch((e) => {\n        console.log(\"Error occurred while getting the video stream\");\n      });\n  }\n\n  video.onloadedmetadata = () => {\n    webcamCanvas.width = video.videoWidth;\n    webcamCanvas.height = video.videoHeight;\n    tempCanvas.width = video.videoWidth;\n    tempCanvas.height = video.videoHeight;\n  };\n\n  video.addEventListener(\"loadeddata\", segmentPersons);\n}\n\nfunction segmentPersons() {\n  tempCanvasCtx.drawImage(video, 0, 0);\n  if (previousSegmentationComplete) {\n    previousSegmentationComplete = false;\n    // Now classify the canvas image we have available.\n    model\n      .segmentPerson(tempCanvas, segmentationProperties)\n      .then((segmentation) => {\n        processSegmentation(segmentation);\n        previousSegmentationComplete = true;\n      });\n  }\n  //Call this function repeatedly to perform segmentation on all frames of the video.\n  window.requestAnimationFrame(segmentPersons);\n}\n\nfunction processSegmentation(segmentation) {\n  var imgData = tempCanvasCtx.getImageData(\n    0,\n    0,\n    webcamCanvas.width,\n    webcamCanvas.height\n  );\n  //Loop through the pixels in the image\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    let pixelIndex = i / 4;\n    //Make the pixel transparent if it does not belong to a person using the body-pix model's output data array.\n    //This removes all pixels corresponding to the background.\n    if (segmentation.data[pixelIndex] == 0) {\n      imgData.data[i + 3] = 0;\n    }\n  }\n  //Draw the updated image on the canvas\n  webcamCanvasCtx.putImageData(imgData, 0, 0);\n}\n\nmain();\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}